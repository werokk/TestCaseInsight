// Groq API client for AI test case generation
// Uses environment variables for API key

// Define response type from Groq API
export interface GroqResponse {
  choices: {
    message: {
      content: string;
    };
  }[];
}

// Define a test case generated by AI
export interface GeneratedTestCase {
  title: string;
  description: string;
  steps: {
    description: string;
    expectedResult: string;
  }[];
  expectedResult: string;
  priority?: string;
  type?: string;
}

// Send a prompt to Groq API to generate test cases
export async function generateTestCases(
  prompt: string,
  testType: string,
  count: number
): Promise<GeneratedTestCase[]> {
  // Get API key from environment
  const apiKey = import.meta.env.VITE_GROQ_API_KEY || '';
  
  if (!apiKey) {
    throw new Error('GROQ_API_KEY is not set in environment variables');
  }

  const systemPrompt = `You are a test case generation assistant. Create ${count} detailed test cases for the following requirements, focusing on ${testType} tests. Each test case should include:
1. A specific title
2. A brief description
3. Numbered steps with expected results
4. An overall expected result
5. A priority level (critical, high, medium, or low)`;

  const userPrompt = `Requirements: ${prompt}

Format each test case as a JSON object with the following structure:
{
  "title": "Test Case Title",
  "description": "Brief description of the test case",
  "steps": [
    {
      "description": "Step 1 description",
      "expectedResult": "Expected result for step 1"
    },
    {
      "description": "Step 2 description", 
      "expectedResult": "Expected result for step 2"
    }
  ],
  "expectedResult": "Overall expected result",
  "priority": "high/medium/low",
  "type": "${testType}"
}

Return the output as a JSON array containing ${count} test cases.`;

  try {
    const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: 'llama3-8b-8192',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
        temperature: 0.7,
        max_tokens: 4000
      })
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(`Groq API error: ${error}`);
    }

    const data: GroqResponse = await response.json();
    const content = data.choices[0]?.message?.content;
    
    if (!content) {
      throw new Error('No content returned from Groq API');
    }

    // Extract the JSON array from the response
    // The response might include markdown code block formatting
    const jsonStr = content.includes('```json')
      ? content.split('```json')[1].split('```')[0].trim()
      : content.includes('```')
        ? content.split('```')[1].split('```')[0].trim()
        : content;
        
    return JSON.parse(jsonStr) as GeneratedTestCase[];
  } catch (error) {
    console.error('Error calling Groq API:', error);
    throw error;
  }
}
